-- MySQL Workbench Forward Engineering

--SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
--SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
--SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema LOG_POINT_1
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `LOG_POINT_1` ;

-- -----------------------------------------------------
-- Schema LOG_POINT_1
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `LOG_POINT_1` DEFAULT CHARACTER SET utf8 ;
SHOW WARNINGS;
USE `LOG_POINT_1` ;

-- -----------------------------------------------------
-- Table `LOG_POINT_1`.`LOGS_1`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `LOG_POINT_1`.`LOGS_1` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `LOG_POINT_1`.`LOGS_1` (
  `LOGID` BIGINT(20) NOT NULL AUTO_INCREMENT COMMENT 'Auto generated Technical id of table',
  `MESSAGES_ID` BIGINT(20) NULL COMMENT 'LOG Message ID if exists',
  `TIMESTAMP` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Timestamp current timestamp by default',
  `LOG_TIMESTAMP` TIMESTAMP NULL COMMENT 'LOG data timestamp ',
  `STRUCTURED-DATA` VARCHAR(1024) NULL COMMENT 'Structured data with SD-ELEMENT SD-ID SD-PARAM',
  `MSG_EPOCH` VARCHAR(15) NULL DEFAULT NULL COMMENT 'LOG msg epoch',
  `FACILITY` VARCHAR(255) NULL DEFAULT NULL COMMENT 'Facility',
  `PRI` VARCHAR(35) NULL DEFAULT NULL COMMENT 'Priority',
  `APP-NAME` VARCHAR(5000) NULL DEFAULT NULL COMMENT 'Application name',
  `PROCID` VARCHAR(128) NULL DEFAULT NULL COMMENT 'Process id',
  `MSG` VARCHAR(21844) NULL DEFAULT NULL COMMENT 'LOG MESSAGE',
  `HOSTNAME` VARCHAR(45) NULL COMMENT 'Hostname',
  `MSGID` VARCHAR(128) NULL COMMENT 'Message ID',
  `SD-ELEMENT` VARCHAR(128) NULL COMMENT 'SD-Element if generated form STRUCTURED-DATA',
  `SD-ID` VARCHAR(256) NULL COMMENT 'SD-ID if generated from STRUCTURED-DATA',
  `SD-PARAM` VARCHAR(512) NULL COMMENT 'SD-PARAM if generated from STRUCTURED-DATA',
  PRIMARY KEY (`LOGID`))
ENGINE = InnoDB
AUTO_INCREMENT = 1
DEFAULT CHARACTER SET = utf8;

SHOW WARNINGS;
CREATE INDEX `logid` ON `LOG_POINT_1`.`LOGS_1` (`LOGID` ASC) VISIBLE;

SHOW WARNINGS;
CREATE INDEX `log_timestamp` ON `LOG_POINT_1`.`LOGS_1` (`TIMESTAMP` ASC) VISIBLE;

SHOW WARNINGS;
CREATE INDEX `msg_epoch` ON `LOG_POINT_1`.`LOGS_1` (`MSG_EPOCH` ASC) VISIBLE;

SHOW WARNINGS;
CREATE INDEX `facility` ON `LOG_POINT_1`.`LOGS_1` (`FACILITY` ASC) VISIBLE;

SHOW WARNINGS;
CREATE INDEX `priority` ON `LOG_POINT_1`.`LOGS_1` (`PRI` ASC) VISIBLE;

SHOW WARNINGS;
CREATE INDEX `program` ON `LOG_POINT_1`.`LOGS_1` (`APP-NAME`(767) ASC) VISIBLE;

SHOW WARNINGS;
CREATE INDEX `pid` ON `LOG_POINT_1`.`LOGS_1` (`PROCID` ASC) VISIBLE;

SHOW WARNINGS;
CREATE INDEX `msg` ON `LOG_POINT_1`.`LOGS_1` (`MSG`(767) ASC) VISIBLE;

SHOW WARNINGS;
CREATE INDEX `hostname` ON `LOG_POINT_1`.`LOGS_1` (`HOSTNAME` ASC) VISIBLE;

--SHOW WARNINGS;
--CREATE UNIQUE INDEX `MESSAGE_ID_UNIQUE` ON `LOG_POINT_1`.`LOGS_1` (`MESSAGES_ID` ASC, `LOGID` ASC) VISIBLE;

--SHOW WARNINGS;
--USE `LOG_POINT_1` ;

-- -----------------------------------------------------
-- procedure CLEAN_OLD_LOGS
-- -----------------------------------------------------

USE `LOG_POINT_1`;
DROP procedure IF EXISTS `LOG_POINT_1`.`CLEAN_OLD_LOGS`;
SHOW WARNINGS;

DELIMITER $$
USE `LOG_POINT_1`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `CLEAN_OLD_LOGS`(IN COMMIT_CNT INT, IN DAYS_X INT, IN DEL_UC INT, IN E_MOD_ROWS INT, OUT DEL_ROWS INT)
    COMMENT 'Delete old rows from database by manually calling or calling from script.\nP1 IN  int= Commit every n rows.\nP2 IN  int= Rows older than n Days are deleted.\nP3 IN  int= UNCOMMITTED old rows are deleted. 0(no);1(yes).\nP4 IN  int= Modulus count - every n rows countdown is printed.\nP5 OUT int= Deleted rows count (All).'
BEGIN
	DECLARE COUNT1 INT;
	DECLARE COUNT2 INT DEFAULT 0;
	DECLARE CNT_MOD INT DEFAULT 0;
	DECLARE ROWS_DEL_ECHO INT DEFAULT 1;
	DECLARE COMMIT_COUNT INT DEFAULT 0;
	DECLARE DAYS_OLDER INT DEFAULT 0;
	DECLARE DO_ITERATE INT DEFAULT 1;
	DECLARE DEL_UC_ROWS INT DEFAULT 0;
	DECLARE LIDS INT DEFAULT 0;
	DECLARE cur_1 CURSOR FOR SELECT COUNT(LOGID) FROM LOGS WHERE LOG_TIMESTAMP < DATE_SUB(CURRENT_TIMESTAMP, INTERVAL DAYS_OLDER DAY);
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET DO_ITERATE=0;
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
	END;
	SET COMMIT_COUNT=COMMIT_CNT;
	SET DAYS_OLDER=DAYS_X;
	SET DEL_UC_ROWS=DEL_UC;
	SET ROWS_DEL_ECHO=E_MOD_ROWS;
	BLOCK1: BEGIN
		START TRANSACTION;
			CREATE TEMPORARY TABLE IF NOT EXISTS XLOGS (LOGID BIGINT NOT NULL);
		COMMIT;
		IF DEL_UC_ROWS=1 THEN
			SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
		END IF;
			BLOCK2: BEGIN
				PREP_DEL: LOOP BEGIN
					OPEN cur_1;
					FETCH cur_1 INTO LIDS;
					IF LIDS < 1 || DO_ITERATE=0 THEN
						LEAVE PREP_DEL;
					END IF;
					SET COUNT2=0;
					IF LIDS < COMMIT_COUNT THEN
						SET COUNT2=COUNT2+LIDS;
					ELSE
						SET COUNT2=COUNT2+COMMIT_COUNT;
					END IF;
					SET CNT_MOD=LIDS % ROWS_DEL_ECHO;
						START TRANSACTION;
							INSERT INTO XLOGS (SELECT LOGID FROM LOGS WHERE LOG_TIMESTAMP < DATE_SUB(CURRENT_TIMESTAMP, INTERVAL DAYS_OLDER DAY) LIMIT COMMIT_COUNT);
							(SELECT COUNT(*) FROM LOGS INTO COUNT1);
						COMMIT;
						START TRANSACTION;
							DELETE a1, a2 FROM LOGS as a1 INNER JOIN XLOGS AS a2 where a1.LOGID=a2.LOGID;
							DELETE FROM XLOGS;
						COMMIT;
					END;
					IF ROWS_DEL_ECHO > 0 THEN
						IF COUNT1 % COUNT2 = CNT_MOD THEN
							SELECT CONCAT_WS(' | ',CONCAT('Remaining: ',COUNT1),CONCAT('DelRowsInBlock: ',COUNT2)) AS "COUNTDOWN";
						END IF;
					END IF;
					SET LIDS=0;
					CLOSE cur_1;
				END LOOP PREP_DEL;
				SET DEL_ROWS=COUNT2;
			END;
		DROP TEMPORARY TABLE IF EXISTS XLOGS;
	END;
END$$

DELIMITER ;
SHOW WARNINGS;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
